name: GPT Processing v6

on:
  workflow_dispatch:
    inputs:
      user_input:
        description: 'User input for GPT processing'
        required: true
        type: string
      branch:
        description: 'Select the branch to run the workflow on'
        required: true
        type: choice
        options:
          - dev
          - main
          # Add other branch names as needed
      target_branch:
        description: 'Select the target branch for the pull request'
        required: true
        type: choice
        options:
          - dev
          - main
          # Add other branch names as needed

jobs:
  process-with-gpt:
    runs-on: ubuntu-latest
    env:
      NEW_BRANCH_NAME: ${{ github.event.inputs.branch }}-gptOutput
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install my-gpt package
        run: |
          python -m pip install --upgrade pip
          pip install whl/adchackathon202405t1-0.0.2-py3-none-any.whl

      - name: Extract repository content
        id: repo-content
        run: |
          repository_files=$(find . -type f -not -path '*/\.*')
          repository_context=""
          for file in $repository_files; do
            if grep -qI '.*' "$file"; then  # If the file is a text file, add its content
              repository_context+=$(echo "
                --- $file ---
                $(cat "$file")")
            else
              repository_context+=$(echo "
                --- $file ---
                <BINARY_FILE>")
            fi
          done
          
          repository_context=$(echo -n "$repository_context" | base64)
          echo "::set-output name=repository_context::$repository_context"

      - name: Process with my-gpt package
        id: process-output
        run: |
          user_input="${{ github.event.inputs.user_input }}"
          repository_context="${{ steps.repo-content.outputs.repository_context }}"
          mkdir -p tests  # Ensure the directory exists
          touch tests/test.py  # Ensure the file exists
          echo "$repository_context" | base64 --decode > tests/test.py
          
          output=$(python -m src --user_input "$user_input" --underlying_repo tests/test.py)
          
          echo "$output"  # Debugging: Output the result to check

      - name: Debugging - Check process output
        run: |
          echo "Process Output:"
          ls -l tests  # List the contents of the tests directory
          pwd # Output the current directory
          cat tests/test.py  # Output the content of tests/test.py

      - name: Create output directory and file
        run: |
          mkdir -p tests
          echo "${{ steps.process-output.outputs.process_output }}" > tests/test.py
          cat tests/test.py  # Debugging: Check the content of the created file

      - name: Stash changes
        run: |
          git stash --include-untracked

      - name: Create or switch to output branch
        run: |
          git fetch origin
          if git rev-parse --verify origin/$NEW_BRANCH_NAME; then
            git checkout $NEW_BRANCH_NAME
          else
            git checkout -b $NEW_BRANCH_NAME
          fi

      - name: Remove existing repository_context.txt
        run: |
          rm -f repository_context.txt

      - name: Apply stashed changes
        run: |
          git stash pop || true

      - name: Commit files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add tests/test.py
          git commit -m "Add GPT processed output" || echo "No changes to commit"

      - name: Push changes to feature branch
        run: |
          git push origin $NEW_BRANCH_NAME

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Add GPT processed output"
          branch: ${{ env.NEW_BRANCH_NAME }}
          base: ${{ github.event.inputs.target_branch }}
          title: "Add GPT processed output"
          body: "This PR adds the GPT processed output."
